#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import secrets
import base64
# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

app_id = secrets.token_hex(12)
phrase = secrets.token_bytes(32)
pfx = base64.b64encode(phrase)


def generate_random_password():
    return secrets.token_urlsafe(16)

#DATABASE CONFIGURATIONS
MONGO_INITDB_ROOT_USERNAME = data.get('MONGO_INITDB_ROOT_USERNAME', 'root')
MONGO_INITDB_ROOT_PASSWORD = data.get('MONGO_INITDB_ROOT_PASSWORD', generate_random_password())
MONGO_INITDB_DATABASE = data.get('MONGO_INITDB_DATABASE', 'opensign')
MONGO_INITDB_USERNAME = data.get('MONGO_INITDB_USERNAME', 'opensign')
MONGO_INITDB_PASSWORD = data.get('MONGO_INITDB_PASSWORD',generate_random_password())
MONGO_HOST = data.get('MONGO_HOST', 'mongo-app')
MONGO_PORT = data.get('MONGO_PORT', '27017')

mongo_config = {
    "MONGO_INITDB_ROOT_USERNAME": MONGO_INITDB_USERNAME,
    "MONGO_INITDB_ROOT_PASSWORD": f'{MONGO_INITDB_ROOT_PASSWORD}',
    "MONGO_INITDB_DATABASE": MONGO_INITDB_DATABASE,
    "MONGO_INITDB_USERNAME": MONGO_INITDB_USERNAME,
    "MONGO_INITDB_PASSWORD": f'{MONGO_INITDB_PASSWORD}',
    "MONGO_HOST": MONGO_HOST,
    "MONGO_PORT": MONGO_PORT,
}
agent.write_envfile("mongo.env", mongo_config)

APP_ID = data.get('APP_ID', app_id)
MASTER_KEY = data.get('MASTER_KEY', app_id)
MONGODB_URI = f'mongodb://{MONGO_INITDB_USERNAME}:{MONGO_INITDB_PASSWORD}@{MONGO_HOST}:{MONGO_PORT}/{MONGO_INITDB_DATABASE}'
PARSE_MOUNT = data.get('PARSE_MOUNT', '/app')

# Backend Configuration
backend_config = {
    "APP_ID": APP_ID,
    "MASTER_KEY": MASTER_KEY,
    "MONGODB_URI": MONGODB_URI,
    "PARSE_MOUNT": PARSE_MOUNT,
}
agent.write_envfile('backend-db.env', backend_config)


PFX_BASE64 = data.get('PFX_BASE64', pfx)
PASS_PHRASE = data.get('PASS_PHRASE', phrase)
# PFX Configuration
pfx_config = {
    "PFX_BASE64": PFX_BASE64,
    "PASS_PHRASE": PASS_PHRASE,
}
agent.write_envfile('pfx.env', pfx_config)


agent.dump_env()