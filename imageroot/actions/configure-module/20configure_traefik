#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup default values
host = data.get("host")
h2hs = data.get("http2https", True)
le = data.get("lets_encrypt", False)

# Talk with agent using file descriptor.
# Setup configuration from user input.
agent.set_env("TRAEFIK_HOST", host)
agent.set_env("TRAEFIK_HTTP2HTTPS", h2hs)
agent.set_env("TRAEFIK_LETS_ENCRYPT", le)

# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()

# Find default traefik instance for current node
default_traefik_id = agent.resolve_agent_id("traefik@node")
if default_traefik_id is None:
    sys.exit(2)

env_tcp_ports = os.environ["TCP_PORTS"].split(",")

client_tcp_port = env_tcp_ports[0]
server_tcp_port = env_tcp_ports[1]
agent.set_env("SERVER_TCP_PORT", server_tcp_port)
agent.set_env("CLIENT_TCP_PORT", client_tcp_port)

response = agent.tasks.run(
    agent_id=agent.resolve_agent_id("traefik@node"),
    action="set-route",
    data={
        "instance": os.environ["MODULE_ID"],
        "url": "http://127.0.0.1:" + client_tcp_port,
        "host": host,
        "http2https": h2hs,
        "lets_encrypt": le,
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response["exit_code"] == 0)
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id("traefik@node"),
    action="set-route",
    data={
        "instance": os.environ["MODULE_ID"] + "-server",
        "url": "http://127.0.0.1:" + server_tcp_port,
        "host": host,
        "http2https": h2hs,
        "lets_encrypt": le,
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response["exit_code"] == 0)
